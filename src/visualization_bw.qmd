---
title: "visualization"
format: pdf
editor: visual
---

## Set up

Here stores all the package needed for this visalization.

```{r setup}
#| echo: false
#| warning: false
#| message: false
requiredCRAN <- c('tidyverse')
requiredBiocPackages <- c('rtracklayer','GenomicFeatures','Gviz','ensembldb','Rsamtools','GenomicAlignments','BRGenomics','randomcoloR')
# requiredBiocPackages <- 
#   c('rtracklayer','GEOquery','BiocFileCache',
#     'SummarizedExperiment','GenomicFeatures','Gviz','DESeq2',
#     'ensembldb')
purrr::walk(requiredCRAN, function(x) library(x,character.only = TRUE))
purrr::walk(requiredBiocPackages, function(x) library(x,character.only = TRUE))
```

## Annotation data

We are using `gencode.vM29.primary_assembly.annotation.gtf` build one TxDB object `txdb` and one EnsDb object `GRCm39`.

```{r parse_gtf}
#| warning: false
#| message: false
# traditional txdb input
txdb <- 
  import("/mnt/gtklab01/linglab/mmusculus_annotation_files/gencode.vM29.primary_assembly.annotation.gtf") |>
  keepStandardChromosomes(pruning.mode="coarse") |>
  makeTxDbFromGRanges()
genes(txdb) # 55357ranges,22seq

# try out EnsDb one
DB <- ensembldb::ensDbFromGtf("/mnt/gtklab01/linglab/mmusculus_annotation_files/gencode.vM29.primary_assembly.annotation.gtf",
                              outfile="/mnt/gtklab01/xiaoqing/scaffold/GRCm39_Ens106.sqlite",
                              organism = "Mus_musculus",
                              genomeVersion ="GRCm39",
                              version=106)
ens106 <- EnsDb(DB)
seqlevelsStyle(ens106) <- "UCSC"
GRCm39 <- ens106
geneRanges_GRCm39 <- genes(GRCm39) # 55414 ranges,39 seq
```

## Cytobands

It seems like mouse cytobands are not informative enough, might not consider includes it in the plotting function.

```{r CytoBands}
#| echo: false
#| warning: false
#| message: false

download.file(url="https://hgdownload.soe.ucsc.edu/goldenPath/mm39/database/cytoBandIdeo.txt.gz",
              destfile="/mnt/gtklab01/xiaoqing/scaffold/cytoBandIdeo.txt.gz")

cytobands <- read_tsv("/mnt/gtklab01/xiaoqing/scaffold/cytoBandIdeo.txt.gz",
         col_names = c("chrom","chromStart","chromEnd","name","gieStain"))
```

## Getting Additional Data

```{r function_prep}
#| warning: false
#| message: false

import_bigwig <- function(file) {
  bw_file <- import.bw(file)
  keepStandardChromosomes(bw_file,pruning.mode = "coarse")
}

# Function to filter tracks by group and category (dmu)
get_track_filter <- function(track_list, group_tags, condition_tag = NULL) {
  if (is.null(condition_tag)) {
    # no condition tag, only match group
    pattern <- paste0("CTX_", group_tags, "_(d|m1|m2|u)")
  } else {
    # match with specific condition
    pattern <- paste0("CTX_", group_tags, "_", condition_tag)
  }
  filter_tracks <- track_list[grepl(paste(pattern, collapse = "|"), names(track_list))]
  return(filter_tracks)
}

generate_shades <- function(base_color,condition_tag) {
  # Convert hex to RGB
  base_rgb <- col2rgb(base_color) / 255
  shades <- colorRampPalette(c("white", rgb(base_rgb[1], base_rgb[2], base_rgb[3])))(5)
  return(shades[2:length(shades)])
}
color_list <- distinctColorPalette(8)
sample_ids <- c(control_group,treatment_group)
sample_base_colors <- setNames(color_list, sample_ids)

data_dir <- "/mnt/gtklab01/xiaoqing/star/results/group"
# grouping tag
treatment_group <- c(104,108,128,154)
control_group <- c(120,125,147,148)
```

Getting bam, bigwig involved.

```{r bigwig}
#| warning: false
#| message: false

# get all bigwig file in path
bw_path <- list.files(path = data_dir, pattern = "^unmapped_CTX_[0-9]{3}_(d|m1|m2|u)\\.bw$", full.names = TRUE)
tags <- str_match(basename(bw_path), "^unmapped_CTX_([0-9]{3})_(d|m1|m2|u)\\.bw$")
combined_tags <- paste(tags[, 2], tags[, 3], sep = "_")
tags <- tags[,2]
# grouping tag
treatment_group <- c(104,108,128,154)
control_group <- c(120,125,147,148)
treatment_bw <- map(bw_path[tags %in% treatment_group], ~ {
  bw_file <- import_bigwig(.x)
  bw_file
})
names(treatment_bw) <- basename(bw_path[tags %in% treatment_group])
control_bw <- map(bw_path[tags %in% control_group], ~ {
  bw_file <- import_bigwig(.x)
  bw_file
})
names(control_bw) <- basename(bw_path[tags %in% control_group])
ylim <- c(0,max(score(unlist(GRangesList(c(control_bw,treatment_bw))))))
# indivial import
for (i in seq_along(bw_path)){
  tag <- combined_tags[i]
  var_name <- paste0("CTX_",tag)
  assign(var_name, import_bigwig(bw_path[i]))
}
```

```{r bigwig}
#| warning: false
#| message: false

bw_path <- list.files(path = data_dir, pattern = "^unmapped_CTX_[0-9]{3}_(d|m1|m2|u)\\.bw$", full.names = TRUE)
bw_track_list <- list()
for (file in bw_path) {
  track_name <- str_match(basename(file), "^unmapped_(CTX_[0-9]{3}_(d|m1|m2|u))\\.bw$")[,2]
  sample_num <- str_match(track_name, "CTX_([0-9]+)")[,2]
  color_pattern <- sample_base_colors[[sample_num]]
  bw_track <- DataTrack(range = file, genome = "mm39",
                         type = "l", name = track_name, window = -1,
                        col = color_pattern)
  bw_track_list[[track_name]] <- bw_track
}

bw_control_tracks <- get_track_filter(bw_track_list, control_group)
bw_control_d_tracks <- get_track_filter(bw_track_list, control_group,"d")
bw_treatment_tracks <- get_track_filter(bw_track_list, treatment_group)
bw_treatment_d_tracks <- get_track_filter(bw_track_list, treatment_group,"d")
```

```{r bam}
#| echo: false
#| warning: false

bam_path <- list.files(path = data_dir, pattern = "^unmappedAligned.sortedByCoord.out_CTX_[0-9]{3}_(d|m1|m2|u).bam$", full.names = TRUE)

# transform all bam file into DataTrack stored in track_list
bam_track_list <- list()
for (file in bam_path) {
  track_name <- str_match(file, "unmappedAligned.sortedByCoord.out_(CTX_[0-9]{3}_(d|m1|m2|u))\\.bam$")[,2]
  bam_track <- DataTrack(range = file, genome = "mm39",
                         type = "l", name = track_name, window = -1)
  bam_track_list[[track_name]] <- bam_track
}

control_tracks <- get_track_filter(bam_track_list, control_group)
treatment_tracks <- get_track_filter(bam_track_list, treatment_group)
plotTracks(control_tracks, from = 80126311, to = 80151482, chromosome = "chr18", main = "Control Group")
```

## Visualization

```{r}
  show_track <- list()
# plot_gene <- function(goi) {
  # gr <- (genes(GRCm39 |> ensembldb::filter(~gene_id == goi)))
  gr <- GRanges(seqnames = "chr18", 
                      ranges = IRanges(start = 80120000, end = 80620000), 
                      strand = "*")
  
  ## let's make it 10% wider
  embiggen_factor <- round(width(gr)*0.1)
  start(gr) <- start(gr) - embiggen_factor
  end(gr) <- end(gr) + embiggen_factor
  
  ## first track:: cytobands
  idt <- IdeogramTrack(chromosome=as.character(chrom(gr)),
                     genome='mm39',
                     bands=cytobands,
                     from=start(gr),to=end(gr))
  show_track <- list(idt)
  
  ## track:: genomic coordinates
  gaxis <- GenomeAxisTrack()
  show_track <- append(show_track,list(gaxis))

  
  ## track:: current trxns (two choic now)
  grTrack <- GeneRegionTrack(txdb, 
                           chromosome = as.character(chrom(gr)),
                           start=start(gr),
                           end=end(gr), 
                           cex.group=0.4,
                           showId=TRUE)
  show_track <- append(show_track,list(grTrack))
  # grTrack2 <- GeneRegionTrack(ensembldb::filter(GRCh38, ~ gene_id == goi),
                             # name=gr$symbol)
  # show_track <- append(show_track,list(grTrack,grTrack2))
  
  ## track:: for bw
  treatment_dt <- OverlayTrack(map(treatment_bw, function(bw) {
    DataTrack(bw, type = 'l', name = 'treatment', ylim = ylim, alpha = 0.9,
            col = 'blue', 
            chromosome = as.character(chrom(gr)),
            from = start(gr), to = end(gr)) 
    }),
    from = start(gr), to = end(gr))
  show_track <- append(show_track,list(treatment_dt))
  
  ## track:: for bam
  control_tracks_c <- OverlayTrack(trackList = control_tracks, name = "Control")
  treatment_tracks_c <- OverlayTrack(trackList = treatment_tracks, name = "Treatment")
  show_track <- append(show_track,control_tracks_c)
  show_track <- append(show_track,treatment_tracks_c)
  
  plotTracks(show_track,from=start(gr),to=end(gr))
  # }
```

```{r}
treatment_d_trk <- OverlayTrack(bw_treatment_d_tracks,from=start(gr),to=end(gr),chromosome = as.character(chrom(gr)),name = "treatment")

control_d_trk <- OverlayTrack(bw_control_d_tracks,from=start(gr),to=end(gr),chromosome = as.character(chrom(gr)))

plotTracks(list(treatment_d_trk,control_d_trk),from=start(gr),to=end(gr),chromosome = as.character(chrom(gr)))
```
