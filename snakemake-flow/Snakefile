import os
import re

configfile: "/mnt/cbis/home/e1124735/Capstone/snakemake-flow/config.yaml"
awk = config["awk"]
log: "logs/generatedecoy.log"

rule all:
    input:
        f"{config['output_dir']}/gentrom.fa",
        f"{config['output_dir']}/decoy.txt"

rule make_outfolder:
    output:
        directory(config["output_dir"])
    shell:
        "mkdir -p {output}"

rule extract_trxn:
    input:
        fasta=config["Paths"]["genomefile"],
        gtf=config["Paths"]["gtffile"]
    output:
        f"{config['output_dir']}/transcripts.fa"
    shell:
        """
        {config[gffread]} -g {input.fasta} {input.gtf} -w {output}
        """

rule extract_exon:
    input:
        config["Paths"]["gtffile"]
    output:
        exon_out=f"{config['output_dir']}/exon_out.bed",
        exon_merge=f"{config['output_dir']}/exon_merge.bed"
    shell:
        """
        {config[gffread]} {input} -T -o- | {config[awk]} '$3 == "exon" {{gsub(/"|;/, "", $12); print $1 "\t" $4 "\t" $5 "\t" $12 "\t" $6 "\t" $7}}' > {output.exon_out}
        {config[bedtools]} sort -i {output.exon_out} | {config[bedtools]} merge -c 4,5,6 -o collapse,collapse,collapse > {output.exon_merge}
        """

rule extract_intron:
    input:
        exon=f"{config['output_dir']}/exon_merge.bed",
        gtf=config["Paths"]["gtffile"]
    output:
        genes=f"{config['output_dir']}/genes.bed",
        intronic=f"{config['output_dir']}/intronic.bed",
        intronic_merge=f"{config['output_dir']}/intronic_merge.bed",
        intronic_seq=f"{config['output_dir']}/intronic_found.fa"
    shell:
        """
        {config[awk]} -v OFS='\t' '{{if ($3=="gene") {{gsub(/"|;/, "", $10); print $1,$4,$5,$10,$6,$7}}}}' {input.gtf} | {config[bedtools]} sort > {output.genes}
        {config[bedtools]} subtract -a {output.genes} -b {input.exon} -nonamecheck > {output.intronic}
        {config[bedtools]} sort -i {output.intronic} | {config[bedtools]} merge -c 4,5,6 -o collapse,collapse,collapse > {output.intronic_merge}
        {config[bedtools]} getfasta -name -fi {config[Paths][genomefile]} -bed {output.intronic_merge} -fo {output.intronic_seq}
        """

rule mask_genome:
    input:
        fasta=config["Paths"]["genomefile"],
        exon=f"{config['output_dir']}/exon_merge.bed"
    output:
        f"{config['output_dir']}/reference.masked.genome.fa"
    shell:
        """
        {config[bedtools]} maskfasta -fi {input.fasta} -bed {input.exon} -fo {output}
        """

rule mashmap:
    input:
        txp=os.path.join(config["output_dir"] + "/transcripts.fa"),
        mask_gene=f"{config['output_dir']}/reference.masked.genome.fa"
    output:
        f"{config['output_dir']}/mashmap.out"
    shell:
        """
        {config[mashmap]} -r {input.mask_gene} -q {input.txp} -t {config[Params][threads]} --pi 80 -s 500 -o {output}
        """

rule extract_intervals:
    input:
        f"{config['output_dir']}/mashmap.out"
    output:
        sorted=f"{config['output_dir']}/genome_found_sorted.bed",
        merged=f"{config['output_dir']}/genome_found_merged.bed"
    shell:
        """
        {config[awk]} -v OFS='\t' '{{print $6,$8,$9,$1,".",$5}}' {input} | sort -k1,1 -k2,2n - > {output.sorted}
        {config[bedtools]} merge -i {output.sorted} -c 4,5,6 -o collapse,first,collapse > {output.merged}
        """

rule extract_sequences:
    input:
        fasta=f"{config['output_dir']}/reference.masked.genome.fa",
        bed=f"{config['output_dir']}/genome_found_merged.bed"
    output:
        f"{config['output_dir']}/genome_found.fa"
    shell:
        """
        {config[bedtools]} getfasta -fi {input.fasta} -bed {input.bed} -fo {output}
        """

rule concat_decoy:
    input:
        decoy=f"{config['output_dir']}/genome_found.fa",
        intron=f"{config['output_dir']}/intronic_found.fa"
    output:
        decoy=f"{config['output_dir']}/decoy.fa",
        intron=f"{config['output_dir']}/intron_chr.fa"
    shell:
        """
        {config[awk]} '{{a=$0; getline;split(a, b, ":");  r[b[1]] = r[b[1]]""$0}} END {{ for (k in r) {{ print k"\\n"r[k] }} }}' {input.decoy} > {output.decoy}
        {config[awk]} '{{a=$0; getline;split(a, b, ":");  r[b[1]] = r[b[1]]""$0}} END {{ for (k in r) {{ print k"_intronic\\n"r[k] }} }}' {input.intron} > {output.intron}
        """

rule make_gentrome:
    input:
        decoy=f"{config['output_dir']}/decoy.fa",
        intron=f"{config['output_dir']}/intron_chr.fa",
        trxn=f"{config['output_dir']}/transcripts.fa"
    output:
        f"{config['output_dir']}/gentrom.fa"
    shell:
        """
        cat {input.trxn} {input.decoy} {input.intron} > {output}
        """

rule extract_decoy_ids:
    input:
        decoy=f"{config['output_dir']}/decoy.fa",
        intron=f"{config['output_dir']}/intron_chr.fa"
    output:
        f"{config['output_dir']}/decoy.txt"
    shell:
        """
        grep -h ">" {input.decoy} {input.intron} | {config[awk]} '{{print substr($1,2); }}' > {output}
        """

rule clean_temp:
    input:
    output:
    shell:
        """
        rm exon_out.bed intronic.bed reference.masked.genome.fa reference.masked.genome.fa.fai genome_found.sorted.bed
        rm mashmap.out genome_found_merged.bed genome_found.fa decoy.fa intron_chr.fa
        """
